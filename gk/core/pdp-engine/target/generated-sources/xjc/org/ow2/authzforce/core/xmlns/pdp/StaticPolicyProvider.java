//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.2 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ow2.authzforce.core.xmlns.pdp;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlElements;
import jakarta.xml.bind.annotation.XmlType;
import oasis.names.tc.xacml._3_0.core.schema.wd_17.PolicySet;
import org.ow2.authzforce.xmlns.pdp.ext.AbstractPolicyProvider;


/**
 * 
 * <pre>
 * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;p xmlns="http://www.w3.org/1999/xhtml" xmlns:authz-ext="http://authzforce.github.io/xmlns/pdp/ext/3" xmlns:p522200_="http://java.sun.com/xml/ns/jaxb/xjc" xmlns:p747075_="https://jakarta.ee/xml/ns/jaxb" xmlns:tns="http://authzforce.github.io/core/xmlns/pdp/8" xmlns:xacml="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;&#13;
 *                     Policy(Set) Provider loading policies&#13;
 *                     statically either inline or from URLs. Any&#13;
 *                     &lt;i&gt;PolicyIdReference&lt;/i&gt;&#13;
 *                     used in a PolicySet here&#13;
 *                     must refer to a&#13;
 *                     Policy loaded here as well. Besides, a&#13;
 *                     PolicySet&#13;
 *                     P1&#13;
 *                     must be loaded before any other PolicySet P2 with a reference&#13;
 *                     (PolicySetIdReference) to P1. As&#13;
 *                     PolicySets are&#13;
 *                     loaded in the order&#13;
 *                     of declaration of&lt;i&gt;policyLocation&lt;/i&gt;&#13;
 *                     s, the order&#13;
 *                     matters for&#13;
 *                     PolicySetIdReference resolution.&#13;
 *                     This PolicyProvider implements the&lt;i&gt;PolicyProvider#getCandidateRootPolicy()&lt;/i&gt;&#13;
 *                     - the method provides a default root policy to be used when the PDP's configuration parameter&#13;
 *                     &lt;i&gt;rootPolicyRef&lt;/i&gt;&#13;
 *                     is undefined - as follows:&#13;
 *                 &lt;/p&gt;
 * </pre>
 * 
 * <pre>
 * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;ul xmlns="http://www.w3.org/1999/xhtml" xmlns:authz-ext="http://authzforce.github.io/xmlns/pdp/ext/3" xmlns:p522200_="http://java.sun.com/xml/ns/jaxb/xjc" xmlns:p747075_="https://jakarta.ee/xml/ns/jaxb" xmlns:tns="http://authzforce.github.io/core/xmlns/pdp/8" xmlns:xacml="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;&lt;li&gt;&#13;
 *                         If there is one and only one XACML Policy provided (e.g. one or more&#13;
 *                         &lt;i&gt;policyLocation&lt;/i&gt;&#13;
 *                         s are defined, pointing to one or more versions of the same XACML Policy), return the latest&#13;
 *                         version of this Policy;&lt;/li&gt;&lt;li&gt;&#13;
 *                         Else apply the same rule to XACML PolicySet(s);&#13;
 *                     &lt;/li&gt;&lt;li&gt;&#13;
 *                         Else no candidate (e.g. there is more than one XACML Policy and more than one XACML PolicySet,&#13;
 *                         in which case the&#13;
 *                         &lt;i&gt;rootPolicyRef&lt;/i&gt;&#13;
 *                         must be explicitly defined in PDP's configuration to make the choice).&#13;
 *                     &lt;/li&gt;&lt;/ul&gt;
 * </pre>
 * 
 * <pre>
 * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;p xmlns="http://www.w3.org/1999/xhtml" xmlns:authz-ext="http://authzforce.github.io/xmlns/pdp/ext/3" xmlns:p522200_="http://java.sun.com/xml/ns/jaxb/xjc" xmlns:p747075_="https://jakarta.ee/xml/ns/jaxb" xmlns:tns="http://authzforce.github.io/core/xmlns/pdp/8" xmlns:xacml="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;&#13;
 *                     Such policy provider may call previously declared providers (in 'policyProvider' elements) to&#13;
 *                     resolve unsupported policy references, but only if they are static policy providers as well, i.e.&#13;
 *                     each implementation implements interface&#13;
 *                     'org.ow2.authzforce.core.pdp.api.policy.StaticPolicyProvider'.&#13;
 *                 &lt;/p&gt;
 * </pre>
 * 
 * 
 * <p>Java class for StaticPolicyProvider complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>{@code
 * <complexType name="StaticPolicyProvider">
 *   <complexContent>
 *     <extension base="{http://authzforce.github.io/xmlns/pdp/ext/3}AbstractPolicyProvider">
 *       <choice maxOccurs="unbounded">
 *         <element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}PolicySet"/>
 *         <element name="policyLocation" type="{http://www.w3.org/2001/XMLSchema}anyURI"/>
 *       </choice>
 *       <attribute name="ignoreOldVersions" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *     </extension>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "StaticPolicyProvider", propOrder = {
    "policySetsAndPolicyLocations"
})
public final class StaticPolicyProvider
    extends AbstractPolicyProvider
{

    @XmlElements({
        @XmlElement(name = "PolicySet", namespace = "urn:oasis:names:tc:xacml:3.0:core:schema:wd-17", type = PolicySet.class),
        @XmlElement(name = "policyLocation", type = String.class)
    })
    private final List<Object> policySetsAndPolicyLocations;
    @XmlAttribute(name = "ignoreOldVersions")
    private final Boolean ignoreOldVersions;

    public StaticPolicyProvider(final List<Object> policySetsAndPolicyLocations, final Boolean ignoreOldVersions) {
        if (policySetsAndPolicyLocations == null) {
            this.policySetsAndPolicyLocations = null;
        } else {
            this.policySetsAndPolicyLocations = new ArrayList<>(policySetsAndPolicyLocations);
        }
        this.ignoreOldVersions = ignoreOldVersions;
    }

    /**
     * Used by JAX-B
     * 
     */
    protected StaticPolicyProvider() {
        this.policySetsAndPolicyLocations = null;
        this.ignoreOldVersions = null;
    }

    /**
     * Gets the value of the ignoreOldVersions property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isIgnoreOldVersions() {
        if (ignoreOldVersions == null) {
            return false;
        } else {
            return ignoreOldVersions;
        }
    }

    public List<Object> getPolicySetsAndPolicyLocations() {
        List<Object> ret;
        if (policySetsAndPolicyLocations == null) {
            ret = Collections.emptyList();
        } else {
            ret = Collections.unmodifiableList(policySetsAndPolicyLocations);
        }
        return ret;
    }

}
